@page "/about"
@using Models
@inject AppDbContext DbContext
@rendermode InteractiveServer

<PageTitle>About</PageTitle>

<div class="overflow-x-auto shadow-md sm:rounded-lg">
    <table class="w-full text-sm text-left rtl:text-right text-gray-500">
        <thead class="text-xs text-gray-700 uppercase bg-gray-900">
            <tr>
                <th scope="col" class="px-6 py-3 text-white">
                    Product name
                </th>
                <th scope="col" class="px-6 py-3 text-white">
                    Color
                </th>
                <th scope="col" class="px-6 py-3 text-white">
                    Category
                </th>
                <th scope="col" class="px-6 py-3 text-white">
                    Price
                </th>
                <th scope="col" class="px-6 py-3 text-white">
                    <span class="sr-only">Edit</span>
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in lsProducts)
            {
                <tr class="bg-white border-b hover:bg-gray-300">
                    <td class="px-6 py-4 whitespace-nowrap">
                        @product.Name
                    </td>
                    <td class="px-6 py-4">
                        @product.Color
                    </td>
                    <td class="px-6 py-4">
                        @product.Category
                    </td>
                    <td class="px-6 py-4">
                        @product.Price.ToString()
                    </td>
                    <td class="px-6 py-4 text-right flex justify-end space-x-2">
                        <button @onclick="() => EditProduct(product)" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-1 px-3 rounded transition duration-300 ease-in-out">Edit</button>
                        <button @onclick="() => DeleteProduct(product.Id)" class="bg-red-500 hover:bg-red-700 text-white font-bold py-1 px-3 rounded transition duration-300 ease-in-out">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<div class="mt-4">
    <h3 class="text-lg font-semibold mb-2">Add/Edit Product</h3>
    <div class="flex border border-gray-200 rounded-lg overflow-hidden">
        <div class="w-1/4 bg-gray-100 p-4">
            <label class="block mb-2">Name:</label>
            <input type="text" class="form-input w-full" @bind="product.Name" @bind:event="oninput" />
        </div>
        <div class="w-1/4 bg-gray-200 p-4">
            <label class="block mb-2">Color:</label>
            <input type="text" class="form-input w-full" @bind="product.Color" @bind:event="oninput" />
        </div>
        <div class="w-1/4 bg-gray-100 p-4">
            <label class="block mb-2">Category:</label>
            <input type="text" class="form-input w-full" @bind="product.Category" @bind:event="oninput" />
        </div>
        <div class="w-1/4 bg-gray-200 p-4">
            <label class="block mb-2">Price:</label>
            <input type="number" class="form-input w-full" @bind="product.Price" @bind:event="oninput" />
        </div>
    </div>
    <div class="flex justify mt-4">
        <button @onclick="SaveProduct" class="@GetSaveButtonClass()" disabled="@IsSaveDisabled()">Save</button>
    </div>
</div>

@code {
    private List<Product> lsProducts = new List<Product>();
    private Product product = new Product();

    protected override void OnInitialized()
    {
        LoadProducts();
    }

    private void LoadProducts()
    {
        lsProducts = DbContext.Products.ToList();
    }

    private void ResetProduct()
    {
        product = new Product();
    }

    private void SaveProduct()
    {
        if (product.Id == 0)
        {
            DbContext.Products.Add(product);
        }
        else
        {
            var product = DbContext.Products.Find(this.product.Id);
            if (product != null)
            {
                product.Name = this.product.Name;
                product.Color = this.product.Color;
                product.Category = this.product.Category;
                product.Price = this.product.Price;
            }
        }

        DbContext.SaveChanges();
        LoadProducts();
        ResetProduct();
    }

    private void EditProduct(Product product)
    {
        this.product = new Product
            {
                Id = product.Id,
                Name = product.Name,
                Color = product.Color,
                Category = product.Category,
                Price = product.Price
            };
    }

    private void DeleteProduct(int id)
    {
        var product = DbContext.Products.Find(id);
        if (product != null)
        {
            DbContext.Products.Remove(product);
            DbContext.SaveChanges();
            LoadProducts();
        }
    }

    private bool IsSaveDisabled()
    {
        return string.IsNullOrWhiteSpace(product.Name) || string.IsNullOrWhiteSpace(product.Color) || string.IsNullOrWhiteSpace(product.Category) || product.Price <= 0;
    }

    private string GetSaveButtonClass()
    {
        return IsSaveDisabled()
            ? "bg-gray-500 text-white font-bold py-2 px-4 rounded cursor-not-allowed"
            : "bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded";
    }
}
